#!/usr/bin/env coffee

fs = require('fs')
path = require('path')
greek = require('perseus-util').greek
postag = greek.postag
language = require('../lib/language')
Perceptron = require('../lib/perceptron')
Viterbi = require('../lib/viterbi')
SparseVector = require('../lib/vector')
Featurizer = require('../lib/featurizer')
Morpheus = require('../lib/morpheus')
Labelizer = require('../lib/labelizer')
Scorer = require('../lib/scorer')

MAX_TABLE_WIDTH = 193

console.warn("#{new Date()}\tLoading databases into RAM... This will take a couple minutes.")
allLabels = JSON.parse(fs.readFileSync(path.join(__dirname, '../resources/labels.json')))
nounLabels = ('proper-' + label for label in allLabels when /^noun/.test(label))
morpheus = new Morpheus(JSON.parse(fs.readFileSync(path.join(__dirname, '../build/morpheus.unaccentuated.json'))))
featurizer = new Featurizer(morpheus)
labelizer = new Labelizer(morpheus, nounLabels)
v = JSON.parse(fs.readFileSync(path.join(__dirname, '../build/v.json')))
scorer = new Scorer(v, featurizer)
viterbi = new Viterbi(scorer, MAX_TABLE_WIDTH)
X = viterbi.X
Y = viterbi.Y
start = new Date()
console.warn("#{new Date()}\tDone loading databases.")

raw = new Buffer(0)
process.stdin.on('data', (chunk) ->
  raw = Buffer.concat([raw, chunk])
)

process.stdin.on('end', ->
  text = JSON.parse(raw)
  sentence = []
  for token, n in text
    elapsed = new Date().getTime() - start.getTime()
    velocity = n / elapsed
    remaining = (text.length - n) / velocity
    process.stderr.write("Token #{n+1}/#{text.length}. #{remaining / 1000}s remaining\r")
    if language.StopPunctuation.indexOf(token.form) > -1
      stop = token
      if sentence.length
        forms = (token.form for token in sentence)
        labelss = (labelizer.labelize(forms, i) for form, i in forms)
        [labels, scores, pointers] = viterbi.trace(forms, labelss)
        for form, i in forms
          labelsForPrev     = if i - 1 < 0 then language.Starts else labelss[i - 1] 
          labelsForCurrent  = labelss[i]
          sentence[i].labels = []
          for current, k in labelsForCurrent
            max = Number.NEGATIVE_INFINITY
            for prev, j in labelsForPrev
              idx = i * X + k * Y + j
              score = scores[idx]
              if score >= max
                max = score

            [lemma, tag] = current
            sentence[i].labels.push([score, lemma, tag])

      for token, i in sentence
        bestLabel = labels[i]
        allLabels = token.labels
        hash = {}
        for label in allLabels
          [score, lemma, tag] = label
          hash[lemma] ||=
            total: 0
            max: Number.NEGATIVE_INFINITY
            tags: []
            lemma: lemma

          hash[lemma].tags.push([score, tag])
          hash[lemma].total += score
          hash[lemma].max = score if score > hash[lemma].max

        sortedByLemma = (value for ignored, value of hash).sort((a, b) ->
          return -1 if a.lemma == bestLabel[0]
          return 1  if b.lemma == bestLabel[0]
          b.max - a.max
        )
        token.labels = []
        for s in sortedByLemma
          sortedTags = s.tags.sort((a, b) -> b[0] - a[0])
          sortedTags = (tag[1] for tag in sortedTags)
          token.labels.push([s.lemma, sortedTags])

      sentence.push(stop)
      process.stdout.write(JSON.stringify(sentence) + '\n')
      sentence = []
    else
      sentence.push(token)
)

process.stdin.resume()